# -*- coding: utf-8 -*-
from django.core.cache import cache
from django.views.decorators.cache import cache_page
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from django.shortcuts import get_object_or_404, render_to_response
from django.template import Context, Template, RequestContext
from django.template import Template as template_django
from django.core import serializers
from django.core import urlresolvers
from django.core.mail import send_mail, EmailMessage
from django.http import HttpResponse, HttpResponseRedirect, Http404
from django.core.urlresolvers import reverse
from django.utils.html import strip_tags
from django.contrib import auth
from django.contrib import messages
from django.conf import settings
from django.core.paginator import Paginator, InvalidPage, EmptyPage, PageNotAnInteger
from django.views.decorators.csrf import csrf_exempt
from django.utils.encoding import smart_str, smart_unicode
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login
from django.db.models import Q
from django.shortcuts import render

import re
import string
import pycountry
import os
import commands
import json
import whois
import uuid
import urllib2
import urllib
import string
import calendar
import logging
import random
import base64
import hashlib
import hmac
import simplejson
import time as times


from captcha.fields import CaptchaField
from datetime import date, datetime, timedelta, time
from django.utils.timezone import utc

from animetacchi.models import *
from service.tasks import send_email_task, send_sms_task, send_notification

def home(request):
    return render_to_response('index.html',locals(),context_instance=RequestContext(request))

def about(request):
    if request.POST.get('action') == 'saveAbout':
        aboutField = request.POST.get('about')
        memberField = request.POST.get('member')
        aboutData = About()
        aboutData.member = memberField
        aboutData.about = aboutField
        aboutData.save()
        return render_to_response('User/dashboard.html',locals(),context_instance=RequestContext(request))
    return render_to_response('about.html',locals(),context_instance=RequestContext(request))

def services(request):
    return render_to_response('services.html',locals(),context_instance=RequestContext(request))

def signin(request):
    if request.POST:
        try:
            email = request.POST.get('email')
            password = request.POST.get('password')
            email = User.objects.get(email=email)
            cek_auth = auth.authenticate(username=email.username, password=password)
            auth.login(request, cek_auth)
        except Exception, err:
            print err
            message = "The email and password that you entered don't match."
            return render_to_response('signin.html', locals(), context_instance=RequestContext(request))

        if request.user.is_superuser or request.user.is_staff:
            return HttpResponseRedirect(reverse('superadmin'))
        messageSuccess = 'success'
        member = Members.objects.get(user=request.user)
        return render_to_response('signin.html',locals(),context_instance=RequestContext(request))
        #return HttpResponseRedirect(reverse('dashboard'))

    return render_to_response('signin.html',locals(),context_instance=RequestContext(request))


def logout(request):
    auth.logout(request)
    return HttpResponseRedirect(reverse('home'))

def signup(request):
    if request.POST.get('action') == 'signup':
        username = request.POST.get('uname')
        email = request.POST.get('email')
        password = request.POST.get('passwd')
        if User.objects.filter(username=username):
            json_data = {'alert': 'Sorry, username ' + username + ' has been used!!', 'val': False}
            return HttpResponse(simplejson.dumps(json_data), content_type="application/json")
        if User.objects.filter(email=email):
            json_data = {'alert': 'Sorry, email ' + email + ' has been used!!', 'val': False}
            return HttpResponse(simplejson.dumps(json_data), content_type="application/json")
        usr = User.objects.create_user(username=username,email=email,password=password)
        usr.save()
        member = Members()
        member.user = usr
        member.m_name = username
        member.save()
        json_data = {'alert': 'Register Success!!'}
        return HttpResponse(simplejson.dumps(json_data), content_type="application/json")
    return render_to_response('signup.html',locals(),context_instance=RequestContext(request))

def anime(request):
    if request.POST.get('action') == 'search':
        search_val = request.POST.get('search_value')
        if search_val == 'Fullmental':
            print 'yes'
        anime_data = Anime.objects.filter(a_name__contains=search_val)
        for i in anime_data:
            print i.a_name
        return render_to_response('anime_data.html',locals(),context_instance=RequestContext(request))

    if request.POST.get('action') == 'checkbox':
        anime_check = json.loads(request.POST.get('anime_check'))
        anime_dist = Anime.objects.order_by('a_name').distinct('a_name')
        print anime_check
        if len(anime_check) > 0:
            anime_data = Anime.objects.filter(a_genre__in=anime_check).distinct('a_name')
        else:
            anime_data = Anime.objects.all()

        return render_to_response('anime_data.html',locals(),context_instance=RequestContext(request))

    genre = Genre.objects.all()
    '''
    j = 0
    for i in Anime.objects.all():
        anime_list = Anime.objects.filter(a_name=i.a_name).get(id=i.id)
        if anime_list > 1:
            anime_double = Anime.objects.get(id=i.id)
            anime_double.delete()
        anime_list.seq_anime = j
        j += 1
        anime_list.save()
    anime_data = Anime.objects.order_by('a_name').distinct('a_name')
    '''
    anime_data = Anime.objects.all()

    return render_to_response('anime.html',locals(),context_instance=RequestContext(request))

def dashboard(request):
    if request.user.is_authenticated():
        member = Members.objects.get(user=request.user)
        return render_to_response('User/dashboard.html',locals(),context_instance=RequestContext(request))

def users(request,username):
    if request.POST.get('action') == 'saveAbout':
        countData = About.objects.all().count()
        try:
            aboutField = request.POST.get('about')
            seq_about = request.POST.get('seq_about')
            memberId = request.POST.get('member')
            member = Members.objects.get(id=memberId)
            print seq_about
            aboutData = About()
            if seq_about is not None:
                aboutData = About.objects.get(seq_about=seq_about)
                aboutData.member = member
                aboutData.about = aboutField
                aboutData.seq_about = seq_about
                aboutData.save()
                return render_to_response('User/dashboard.html',locals(),context_instance=RequestContext(request))
            aboutData.member = member
            aboutData.about = aboutField
            aboutData.seq_about = countData
            aboutData.save()
        except Exception,err:
            print err
        return render_to_response('User/dashboard.html',locals(),context_instance=RequestContext(request))

    if request.user.is_authenticated():
        member = Members.objects.get(user=request.user)
        usr = User.objects.get(username=username)
        if request.user.username != username:
            return HttpResponseRedirect(reverse('home'))
        about_data = About.objects.filter(member=member.id)
        return render_to_response('User/dashboard.html',locals(),context_instance=RequestContext(request))
    return HttpResponseRedirect(reverse('home'))